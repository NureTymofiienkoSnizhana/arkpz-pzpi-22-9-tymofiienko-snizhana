1
Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії
Звіт
З дисципліни «Аналіз та рефакторинг коду»
З лабораторної роботи №3
Виконала:
ст. гр. ПЗПІ-22-9 Тимофієнко С. О.
Перевірив: Дашенков Д. С.
Харків 2024
2
2 РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ
СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
Мета:
Розробити бізнес-логику та функції адміністрування серверної
частини програмної системи.
Хід роботи:
1. Розробити бізнес логіку серверної частини програмної системи.
1) Основні функції бізнес-логіки
- Управління користувачами та тваринами: створення, редагування
або видалення даних про користувачів та тварин.
- Генерація звітів: завантаження повного звіту про стан здоров’я
тварини за виділений час.
2) Реалізація CRUD-операцій
Для сутностей бази даних були створені функції, що забезпечують
операції створення, читання, оновлення та видалення даних:
- Колекція Users: обробка даних користувачів, функції
адміністрування;
- Колекція HealthData: генерація звітів;
- Колекція Pets: обробка інформації про тварин;
- Колекція Devices: обробка інформації про комірці;
2. Розробити функції адміністрування серверної частини програмної
системи
1) Перевірка ролі користувача:
Було створено функцію CheckRole, яка перевіряє роль користувача при
надсиланні запиту:
func CheckRole(requiredRole string) func(http.Handler)
http.Handler {
return func(next http.Handler) http.Handler {
return http.HandlerFunc(func(w http.ResponseWriter, r
*http.Request) {
role, ok := r.Context().Value("role").(string)
3
if !ok || role == "" {
http.Error(w, "Role not found",
http.StatusUnauthorized)
return
}
if role != requiredRole {
http.Error(w, "Access Denied",
http.StatusForbidden)
return
}
next.ServeHTTP(w, r)
})
}
}
2) Функція для «підробного» користувача:
Була розроблена функція MockUser, яка додає роль до кожного запиту,
для перевірки функцій адміністрування:
func MockUser(role string) func(http.Handler) http.Handler {
return func(next http.Handler) http.Handler {
return http.HandlerFunc(func(w http.ResponseWriter, r
*http.Request) {
// Додаємо роль до контексту
ctx := context.WithValue(r.Context(), "role", role)
next.ServeHTTP(w, r.WithContext(ctx))
})
}
}
3) Для сутності User реалізовано такі маршрути:
- Доступні тільки Адміністратору:
Post /add-pet – додати тварину
Delete /delete-pet – видалити тварину
Get /get-pets – отримати список тварин
4
Put /update-pet – оновити дані тварини
Post /add-device – додати комірець
Put /update-device – оновити дані комірця
Put /update-user – оновити дані користувача
Delete /delete-user – видалити користувача
- Доступні лише Ветеринару:
Get /pet-report/pdf - генерація звіту про стан здоров’я тварини
Get /get-pets – отримання списку всіх тварин
3. UML діаграма діяльності для серверної частини.
Рисунок 3.1 - UML діаграма діяльності для серверної частини
5
ДОДАТОК А
Фрагменти коду програми
Файл report.go
package handlers
import (
"fmt"
"github.com/NureTymofiienkoSnizhana/arkpz-pzpi-22-9-
tymofiienko-snizhana/Pract1/arkpz-pzpi-22-9-tymofiienkosnizhana-task2/src/api/requests"
"github.com/jung-kurt/gofpdf"
"go.mongodb.org/mongo-driver/bson"
"go.mongodb.org/mongo-driver/bson/primitive"
"net/http"
"time"
)
func GetPetReport(w http.ResponseWriter, r *http.Request) {
req, err := requests.NewPetReport(r)
if err != nil {
http.Error(w, "Invalid request format",
http.StatusBadRequest)
return
}
if req.StartTime == 0 || req.EndTime == 0 {
http.Error(w, "Missing start_time or end_time
parameters", http.StatusBadRequest)
return
}
startTime := primitive.Timestamp{T: uint32(req.StartTime),
I: 0}
endTime := primitive.Timestamp{T: uint32(req.EndTime), I: 0}
6
petsDB := MongoDB(r).Pets()
healthDB := MongoDB(r).HealthData()
pet, err := petsDB.Get(req.PetID)
if err != nil {
http.Error(w, "Failed to retrieve pet information",
http.StatusInternalServerError)
return
}
filter := bson.M{
"pet_id": pet.ID,
"time": bson.M{
"$gte": startTime,
"$lte": endTime,
},
}
healthData, err := healthDB.GetByFilter(filter)
if err != nil {
http.Error(w, "Failed to retrieve health data",
http.StatusInternalServerError)
return
}
// Ініціалізація PDF
pdf := gofpdf.New("P", "mm", "A4", "")
pdf.AddUTF8Font("DejaVu", "", "fonts/DejaVuSans.ttf")
pdf.SetFont("DejaVu", "", 14)
pdf.AddPage()
// Заголовок
pdf.Cell(40, 10, "Звіт")
pdf.Ln(10)
7
pdf.SetFont("DejaVu", "", 12)
pdf.Cell(0, 10, fmt.Sprintf("Ім'я: %s", pet.Name))
pdf.Ln(8)
pdf.Cell(0, 10, fmt.Sprintf("Вид: %s", pet.Species))
pdf.Ln(8)
pdf.Cell(0, 10, fmt.Sprintf("Порода: %s", pet.Breed))
pdf.Ln(8)
pdf.Cell(0, 10, fmt.Sprintf("Вік: %d", pet.Age))
pdf.Ln(8)
pdf.Cell(0, 10, fmt.Sprintf("Власник: %s",
requests.GetUserName(MongoDB(r), pet.OwnerID)))
pdf.Ln(8)
// Дані про здоров'я
pdf.Ln(10)
pdf.Cell(0, 10, "Дані стану здоров'я:")
pdf.Ln(10)
for _, health := range healthData {
pdf.Cell(0, 10, fmt.Sprintf("Активність: %s",
health.Activity))
pdf.Ln(6)
pdf.Cell(0, 10, fmt.Sprintf("Сон: %s", health.Sleep))
pdf.Ln(6)
pdf.Cell(0, 10, fmt.Sprintf("Прийом їжі: %s",
health.Feeding))
pdf.Ln(6)
pdf.Cell(0, 10, fmt.Sprintf("Час: %s",
time.Unix(int64(health.Time.T), 0).Format("2006-01-02
15:04:05")))
pdf.Ln(10)
}
// Налаштування заголовків для завантаження файлу
w.Header().Set("Content-Type", "application/pdf")
8
w.Header().Set("Content-Disposition", `attachment;
filename="pet_report.pdf"`)
w.WriteHeader(http.StatusOK)
// Виведення PDF у відповідь
err = pdf.Output(w)
if err != nil {
http.Error(w, "Failed to generate PDF",
http.StatusInternalServerError)
return
}
}
Файл add_pet.go
package handlers
import (
"encoding/json"
"github.com/NureTymofiienkoSnizhana/arkpz-pzpi-22-9-
tymofiienko-snizhana/Pract1/arkpz-pzpi-22-9-tymofiienkosnizhana-task2/src/api/requests"
"github.com/NureTymofiienkoSnizhana/arkpz-pzpi-22-9-
tymofiienko-snizhana/Pract1/arkpz-pzpi-22-9-tymofiienkosnizhana-task2/src/data"
"go.mongodb.org/mongo-driver/bson/primitive"
"net/http"
"strings"
)
func AddPet(w http.ResponseWriter, r *http.Request) {
req, err := requests.NewPet(r)
if err != nil {
w.WriteHeader(http.StatusBadRequest)
return
}
9
pet := data.Pet{
ID: primitive.NewObjectID(),
Name: req.Name,
Species: req.Species,
Breed: req.Breed,
Age: req.Age,
OwnerID: req.OwnerID,
}
petsDB := MongoDB(r).Pets()
err = petsDB.Insert(&pet)
if err != nil {
if strings.Contains(err.Error(), "duplicate key error
collection") {
w.WriteHeader(http.StatusConflict)
return
}
http.Error(w, "Failed to add pet",
http.StatusInternalServerError)
return
}
usersDB := MongoDB(r).Users()
err = usersDB.UpdatePets(req.OwnerID, pet.ID)
if err != nil {
http.Error(w, "Failed to update user with pet ID",
http.StatusInternalServerError)
return
}
w.WriteHeader(http.StatusCreated)
json.NewEncoder(w).Encode(map[string]string{
10
"message": "Pet added successfully",
"petID": pet.ID.Hex(),
})
}
Файл get_owner_pets.go
package handlers
import (
"encoding/json"
"net/http"
"go.mongodb.org/mongo-driver/bson"
"go.mongodb.org/mongo-driver/bson/primitive"
)
func GetOwnerPets(w http.ResponseWriter, r *http.Request) {
ownerIDHex := r.URL.Query().Get("owner_id")
if ownerIDHex == "" {
http.Error(w, "Missing owner_id parameter",
http.StatusBadRequest)
return
}
ownerID, err := primitive.ObjectIDFromHex(ownerIDHex)
if err != nil {
http.Error(w, "Invalid owner_id format",
http.StatusBadRequest)
return
}
usersDB := MongoDB(r).Users()
petsDB := MongoDB(r).Pets()
user, err := usersDB.Get(ownerID)
11
if err != nil {
http.Error(w, "Failed to find user",
http.StatusInternalServerError)
return
}
if len(user.PetsID) == 0 {
w.Header().Set("Content-Type", "application/json")
w.WriteHeader(http.StatusOK)
json.NewEncoder(w).Encode([]interface{}{})
return
}
// Знаходимо тварин за їхніми ID
filter := bson.M{"_id": bson.M{"$in": user.PetsID}}
pets, err := petsDB.GetByFilter(filter)
if err != nil {
http.Error(w, "Failed to retrieve pets",
http.StatusInternalServerError)
return
}
w.Header().Set("Content-Type", "application/json")
w.WriteHeader(http.StatusOK)
json.NewEncoder(w).Encode(pets)
}