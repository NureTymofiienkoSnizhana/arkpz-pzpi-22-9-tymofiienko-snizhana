                    Міністерство освіти і науки України
            Харківський національний університет радіоелектроніки




                        Кафедра програмної інженерії



                                    Звіт
                З дисципліни «Аналіз та рефакторинг коду»
                            З практичної роботи №1




Виконала:
ст. гр. ПЗПІ-22-9						              Тимофієнко С. О.

Перевірив:
ст. викл. ПІ						              	    Сокорчук І. П.









                                Харків 2024
1	ОСНОВНІ РЕКОМЕНДАЦІЇ НАПИСАННЯ КОДУ ДЛЯ GOLANG

1.1. Мета
Ознайомитися з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для GoLang, а також навчитися аналізувати та рефакторити код для покращення його якості. Дослідити основні рекомендації для написання якісного коду у мові GoLang, продемонструвати ці рекомендації на прикладах коду.


1.2. Вступ
GoLang, або просто Go, — це сучасна мова програмування, розроблена компанією Google. Вона поєднує в собі простоту синтаксису, ефективність виконання та вбудовану підтримку конкурентності. Особливості Go включають:
• Сильну типізацію і простий синтаксис;
• Вбудовану підтримку конкурентності через горутини та канали;
• Швидку компіляцію та виконання;
• Автоматичне управління пам'яттю через збирач сміття.
Дотримання кодових конвенцій в Go є ключовим для забезпечення читабельності, підтримуваності та надійності коду.


1.3. Форматування коду
Питання форматування є найбільш спірним, але найменш наслідковим. Програма gofmt читає програму Go та видає вихідний код у стандартному стилі відступу та вертикального вирівнювання, зберігаючи та, якщо необхідно, переформатувавши коментарі. Єдиний стиль коду підвищує читабельність та спрощує командну роботу.
Приклад:
// Поганий приклад (не відформатовано)
switch v := interfaceValue.(type) {
case int:fmt.Printf("Ціле число %d\n", v)
case string:fmt.Printf("Рядок %s\n", v)
default:fmt.Printf("Невідомий тип %T\n", v)}
// Гарний приклад (відформатовано)
switch v := interfaceValue.(type) {
	case int:
		fmt.Printf("Ціле число %d\n", v)
	case string:
		fmt.Printf("Рядок %s\n", v)
	default:
		fmt.Printf("Невідомий тип %T\n", v)
	}
Go не підтримує класи та об’єкти, натомість використовує структури.
У мові програмування Go крапка з комою (;) використовується як роздільник операторів на рівні синтаксису. Однак програмістам зазвичай не потрібно явно ставити крапку з комою наприкінці кожного оператора.
Компілятор Go автоматично вставляє крапки з комою в кінці рядків, коли це необхідно. Це базується на простих правилах лексичного аналізу, які враховують розташування переносів рядків і типів токенів.


1.4. Коментарі
Go надає /* */ блокові коментарі в стилі C і // рядкові коментарі в стилі C++.  Рядкові коментарі є нормою; блокові коментарі з’являються здебільшого як пакетні коментарі, але корисні у виразі або для вимкнення великих фрагментів коду.
Приклад:
//Comment
/* Comment Comment
Comment */
1.5. Оголошення змінних
У Go є два способи оголосити змінну:
1)	З ключовим словом “var”:
var variablename type = value
2)	Зі знаком “:=”:
variablename := value
У другому випадку компілятор визначає тип змінної на основі значення. Неможливо оголосити змінну за допомогою := без призначення їй значення.
Приклад:
var student1 string = "John"
var student2 = "Jane"
x := 2


1.6. Іменування
Імена так само важливі в Go, як і в будь-якій іншій мові. Вони навіть мають семантичний ефект: видимість імені поза пакетом визначається тим, чи є його перший символ великим регістром.
1)	Підкреслення
Імена в Go зазвичай не містять підкреслення. Це спрощує читання коду та дотримується загальних конвенцій стилю мови, але звісно існують винятки.
Приклад:
//Поганий приклад
var max_value int = 4
// Гарний приклад
var maxValue int = 4

2)	Назви пакетів
При виборі назви пакета слід враховувати наступне:
- Короткість та простота: назва має бути лаконічною та легкою для запам'ятовування.
- Уникнення конфліктів: обирайте назви, які не співпадають з поширеними іменами змінних або функцій.
- Послідовність стилю: використовуйте лише малі літери без підкреслень чи інших роздільників.
Приклад:
// Поганий приклад
package my_package
package MyPackage
package myPackage
//Гарний приклад
package mypackage

3)	Однолітерні імена
Однолітерні назви змінних краще використовувати для приймачів методів, індексів у циклах та для координат. У великих областях видимості або коли ім’я змінної не є очевидним з контексту слід використовувати більш змістовні імена.
Приклад:
// Поганий приклад
func(string string) {}()
// Гарний приклад
func(s string) {}()

// Поганий приклад
for index := 0; index < 10; index++ {}
// Гарний приклад
for i := 0; i < 10; i++ {}

4)	MixedCaps
Для назв, які містять декілька слів найкраще всього буде викорастання стилю MixedCaps, коли кожне нове слово починається з великої літери.
Приклад:
// Поганий приклад
const MAX_PACKET_SIZE = 512
const kMaxBufferSize = 1024
// Гарний приклад
const MaxPacketSize = 512

5)	Ініціалізми
В іменах, які містять ініціалізми або абревіатури, усі літери мають бути в одному регістрі. Якщо використовується декілька ініціалізмів, кожен з них може мати свій регістр. Якщо ініціалізм зазвичай містить малі літери (наприклад, iOS), використовуйте стандартне написання.
Приклад:
// Поганий приклад
func ParseUrlData(urlString string) {
	// Гарний приклад
	func ParseURLData(URLString string) {
	}
}

6)	Префікс Get
Краще уникати префіксу Get і називати методи за тим, що вони повертають.
Приклад:
// Поганий приклад: Функція з префіксом Get.
func (u *User) GetName() string {
	return u.Name
}
// Гарний приклад
func (u *User) Name() string {
	return u.Name
}

7)	Повторення
Уникайте непотрібних повторень, наприклад:
- Не  додавайте тип до імені змінної, якщо це не потрібно.
- Використовуйте контекст для скорочення імен.
Приклад:
// Поганий приклад
var nameString string
// Гарний приклад
var name string


1.7. Умовні оператори
1)	Оператор if
У мові Go в умовних операторах відсутні круглі дужки навколо умов, але фігурні дужки слід використовувати завжди, навіть для однорядкових тіл. У Go є наступні умовні інструкції (оператори):
- Використовуйте «if», щоб указати блок коду, який буде виконано, якщо задана умова відповідає дійсності (true)
- Використовуйте «else», щоб указати блок коду, який потрібно виконати, якщо та сама умова є хибною (false)
- Використовуйте «else if», щоб указати нову умову для перевірки, якщо перша умова хибна (false)
Приклад:
if x > 0 {
	return y
}

2)	Оператор switch
Використовуйте «switch», щоб указати багато альтернативних блоків коду для виконання. В інструкції «switch» не потрібно використовувати «break» для запобігання переходу до наступного case.
Приклад:
switch {
	case x < 0:
	fmt.Println("Negative")
	case x == 0:
		fmt.Println("Zero")
	default:
 		fmt.Println("Positive")
}
Інструкцію switch можна використовувати не тільки за значенням змінної, а й за її типом.
Приклад:
switch v := interfaceValue.(type) {
	case int:
		fmt.Printf("Ціле число %d\n", v)
	case string:
		fmt.Printf("Рядок %s\n", v)
	default:
		fmt.Printf("Невідомий тип %T\n", v)
}


1.8. Цикли
У мові Go відсутні do та while цикли: лише узагальнений цикл for.
Цикл for так само як і умовні оператори не використовує круглих дужок навколо умов.
for інструкція1;інструкція2;інструкція3 {
   // код, який буде виконуватися для кожної ітерації
}
Інструкція1 - ініціалізує значення лічильника циклу.
Інструкція2 - оцінюється для кожної ітерації циклу. Якщо воно оцінюється як TRUE, цикл продовжується. Якщо воно має значення FALSE, цикл завершується.
Інструкція3 - збільшує значення лічильника циклу.


1.9. Функції
Щоб створити функцію (яку часто називають оголошенням функції), виконайте такі дії:
• Використовуйте ключове слово «func».
• Вкажіть ім’я функції, а потім круглі дужки ().
• Нарешті, до’дайте код, який визначає, що має робити функція, у фігурні дужки {}.
Синтаксис
func FunctionName() {
  	// код для виконання
}
Щоб викликати функцію, просто напишіть її ім’я і круглі дужки.
Приклад:
func myMessage() {
	fmt.Println("Hello world!")
}
myMessage()


1.10. Висновок
Отже, дотримання кодових стандартів (code conventions) є важливим аспектом у розробці програмного забезпечення, оскільки воно забезпечує єдине форматування та стиль написання коду. Використання узгоджених правил підвищує читабельність і зрозумілість коду, полегшує командну роботу та спрощує процес підтримки і внесення змін у проєкт. Завдяки стандартам код стає більш передбачуваним і менш схильним до помилок, що дозволяє швидше інтегрувати нових розробників у команду і зберігати високу якість продукту протягом усього циклу його життя.


1.11. Джерела
1)	https://go.dev/doc/effective_go#introduction
2)	https://google.github.io/styleguide/go/decisions#naming
3)	https://w3schoolsua.github.io/go/index.html#gsc.tab=0

Посилання на відео з захистом презентації: https://youtu.be/X3ffYWzQJvA
